// AjaxForm jQuery Plugin v0.1.3
// http://github.com/alchapone/ajaxform
// 
// Copyright 2012, Alex Chaplinsky
// Released under the MIT License
//
// Generated by CoffeeScript 1.3.3
(function() {

  (function($) {
    var AjaxForm;
    $.fn.ajaxForm = function(options) {
      var settings;
      if (options == null) {
        options = {};
      }
      settings = {
        errorClass: 'error-field',
        showErrorMessage: true,
        errorMessageFormat: '<div class="error-message">{message}</div>',
        insertMessage: 'before',
        onRequestStart: function() {},
        onRequestEnd: function() {},
        onSuccess: function() {},
        onErrors: function() {},
        onError: function() {}
      };
      if ($.type(options) === 'object') {
        settings = $.extend(settings, options);
        if (!(['after', 'before'].indexOf(settings.insertMessage) > -1)) {
          settings.insertMessage = 'before';
        }
      } else if ($.type(options) === 'function') {
        settings.onSuccess = function(data) {
          return options(data);
        };
      }
      return $(this).each(function() {
        return new AjaxForm(this, settings);
      });
    };
    return AjaxForm = (function() {

      function AjaxForm(element, settings) {
        var _this = this;
        this.el = element;
        this.settings = settings;
        this.method = $(this.el).find('[name=_method]').val() || $(this.el).attr('method') || 'post';
        this.url = $(this.el).attr('action');
        $(element).on('submit', function(event) {
          event.preventDefault();
          return _this.performRequest();
        });
      }

      AjaxForm.prototype.performRequest = function() {
        var data,
          _this = this;
        this.settings.onRequestStart();
        data = $(this.el).serialize();
        return $.ajax({
          type: this.settings.method || this.method,
          url: this.url,
          data: data,
          success: function(json) {
            _this.settings.onRequestEnd();
            if (json.errors === void 0) {
              if (json.redirect !== void 0) {
                window.location = json.redirect;
              }
              return _this.settings.onSuccess(json);
            } else {
              _this.settings.onErrors(json);
              return _this.applyErrors(json.errors);
            }
          },
          error: function(xhr) {
            _this.settings.onRequestEnd();
            return _this.settings.onError(xhr);
          }
        });
      };

      AjaxForm.prototype.applyErrors = function(errors) {
        var _this = this;
        this.clearErrors();
        return $.each(errors, function(key, val) {
          var field, value;
          value = $.isArray(val) ? val[0] : val;
          if ($(_this.el).find("[validate*=" + key + "]").length === 0) {
            field = $(_this.el).find("[name*=" + key + "]");
          } else {
            field = $(_this.el).find("[validate*=" + key + "]");
          }
          return _this.addError(field, value);
        });
      };

      AjaxForm.prototype.addError = function(field, message) {
        var error;
        field.addClass(this.settings.errorClass);
        if (this.settings.showErrorMessage === true) {
          error = this.settings.errorMessageFormat.replace('{message}', message);
          return field[this.settings.insertMessage](error);
        }
      };

      AjaxForm.prototype.clearErrors = function() {
        var fields, method;
        fields = $(this.el).find("." + this.settings.errorClass);
        fields.removeClass(this.settings.errorClass);
        if (this.settings.showErrorMessage === true) {
          method = this.settings.insertMessage === 'before' ? 'prev' : 'next';
          return fields[method]().remove();
        }
      };

      return AjaxForm;

    })();
  })(jQuery);

}).call(this);
